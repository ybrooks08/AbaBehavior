// <auto-generated />
using System;
using AbaBackend.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AbaBackend.Migrations
{
    [DbContext(typeof(AbaDbContext))]
    [Migration("20181120003508_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AbaBackend.DataModel.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BehaviorAnalysisCodeId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("PaNumber")
                        .HasMaxLength(12);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TotalUnits");

                    b.HasKey("AssessmentId");

                    b.HasIndex("BehaviorAnalysisCodeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ClientId");

                    b.Property<int>("UserId");

                    b.HasKey("AssignmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("ClientId", "UserId")
                        .IsUnique();

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("AbaBackend.DataModel.BehaviorAnalysisCode", b =>
                {
                    b.Property<int>("BehaviorAnalysisCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checkable");

                    b.Property<string>("Color")
                        .HasMaxLength(60);

                    b.Property<string>("Description")
                        .HasMaxLength(60);

                    b.Property<string>("Hcpcs")
                        .HasMaxLength(10);

                    b.HasKey("BehaviorAnalysisCodeId");

                    b.HasIndex("Hcpcs")
                        .IsUnique()
                        .HasFilter("[Hcpcs] IS NOT NULL");

                    b.ToTable("BehaviorAnalysisCodes");

                    b.HasData(
                        new { BehaviorAnalysisCodeId = 1, Checkable = false, Color = "red", Description = "Behavioral Assesment", Hcpcs = "H0031" },
                        new { BehaviorAnalysisCodeId = 2, Checkable = false, Color = "pink", Description = "Behavior Reassesment", Hcpcs = "H0032" },
                        new { BehaviorAnalysisCodeId = 3, Checkable = true, Color = "brown", Description = "Lead Analyst", Hcpcs = "H2019" },
                        new { BehaviorAnalysisCodeId = 4, Checkable = true, Color = "indigo", Description = "Assistant Behavior Analyst", Hcpcs = "H2012" },
                        new { BehaviorAnalysisCodeId = 5, Checkable = true, Color = "blue-grey", Description = "Technician", Hcpcs = "H2014" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Caregiver", b =>
                {
                    b.Property<int>("CaregiverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaregiverFullname")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("CaregiverTypeId");

                    b.Property<int>("ClientId");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.HasKey("CaregiverId");

                    b.HasIndex("CaregiverTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Caregivers");
                });

            modelBuilder.Entity("AbaBackend.DataModel.CaregiverType", b =>
                {
                    b.Property<int>("CaregiverTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("CaregiverTypeId");

                    b.ToTable("CaregiversType");

                    b.HasData(
                        new { CaregiverTypeId = 1, Description = "Parent" },
                        new { CaregiverTypeId = 2, Description = "Teacher" },
                        new { CaregiverTypeId = 3, Description = "Related" },
                        new { CaregiverTypeId = 4, Description = "Friend" },
                        new { CaregiverTypeId = 5, Description = "Other" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Apt")
                        .HasMaxLength(10);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(150);

                    b.Property<string>("EmergencyEmail")
                        .HasMaxLength(60);

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(15);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Gender")
                        .HasMaxLength(15);

                    b.Property<string>("Insurance")
                        .HasMaxLength(50);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MemberNo")
                        .HasMaxLength(50);

                    b.Property<string>("MmaIdNo")
                        .HasMaxLength(50);

                    b.Property<string>("MmaPlan")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Nickname")
                        .HasMaxLength(30);

                    b.Property<string>("Notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("PrimaryLanguage")
                        .HasMaxLength(20);

                    b.Property<string>("Race")
                        .HasMaxLength(60);

                    b.Property<string>("SocialSecurity")
                        .HasMaxLength(11);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientChartNote", b =>
                {
                    b.Property<int>("ClientChartNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChartNoteDate");

                    b.Property<int>("ChartNoteType");

                    b.Property<int>("ClientId");

                    b.Property<string>("Note")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.HasKey("ClientChartNoteId");

                    b.ToTable("ClientChartNotes");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientDiagnosis", b =>
                {
                    b.Property<int>("ClientDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("DiagnosisId");

                    b.HasKey("ClientDiagnosisId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ClientId", "DiagnosisId")
                        .IsUnique();

                    b.ToTable("ClientDiagnostics");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientProblem", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("ProblemId");

                    b.Property<int?>("BaselineCount");

                    b.Property<DateTime?>("BaselineFrom");

                    b.Property<DateTime?>("BaselineTo");

                    b.HasKey("ClientId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ClientsProblems");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientReplacement", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("ReplacementId");

                    b.Property<DateTime?>("BaselineFrom");

                    b.Property<int?>("BaselinePercent");

                    b.Property<DateTime?>("BaselineTo");

                    b.HasKey("ClientId", "ReplacementId");

                    b.HasIndex("ReplacementId");

                    b.ToTable("ClientsReplacements");
                });

            modelBuilder.Entity("AbaBackend.DataModel.CompetencyCheck", b =>
                {
                    b.Property<int>("CompetencyCheckId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaregiverId");

                    b.Property<int>("ClientId");

                    b.Property<int>("CompetencyCheckType");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EvaluationById");

                    b.Property<int>("TotalDuration");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId");

                    b.HasKey("CompetencyCheckId");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EvaluationById");

                    b.HasIndex("UserId");

                    b.ToTable("CompetencyChecks");
                });

            modelBuilder.Entity("AbaBackend.DataModel.CompetencyCheckClientParam", b =>
                {
                    b.Property<int>("CompetencyCheckClientParamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("CompetencyCheckId");

                    b.Property<int>("CompetencyCheckParamId");

                    b.Property<byte>("Score");

                    b.HasKey("CompetencyCheckClientParamId");

                    b.HasIndex("CompetencyCheckId");

                    b.HasIndex("CompetencyCheckParamId");

                    b.ToTable("CompetencyCheckClientParams");
                });

            modelBuilder.Entity("AbaBackend.DataModel.CompetencyCheckParam", b =>
                {
                    b.Property<int>("CompetencyCheckParamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(100);

                    b.Property<int>("CompetencyCheckType");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.HasKey("CompetencyCheckParamId");

                    b.ToTable("CompetencyCheckParams");

                    b.HasData(
                        new { CompetencyCheckParamId = 1, Comment = "Behavior(s) occurrences", CompetencyCheckType = 2, Description = "Collected data on problem behaviors which ocurred in session" },
                        new { CompetencyCheckParamId = 2, Comment = "Interventions(s) used for problem behaviors", CompetencyCheckType = 2, Description = "Followed recommended intervention procedures upon occurrence of problem behaviore in session" },
                        new { CompetencyCheckParamId = 3, Comment = "Replacement(s) skill specific for problem behavior", CompetencyCheckType = 2, Description = "Implemented the replacement skills training programs and recorded the data" },
                        new { CompetencyCheckParamId = 4, Comment = "Acquisition(s) skill", CompetencyCheckType = 2, Description = "Implemented the acquisition skills training proramas and recorded the data" },
                        new { CompetencyCheckParamId = 5, Comment = "Reinforcer(s) used for replacement/acquisition training", CompetencyCheckType = 2, Description = "Provided reinforcement in accordance with the program" },
                        new { CompetencyCheckParamId = 6, Comment = "BASP Portion selected to describe and review", CompetencyCheckType = 2, Description = "Demostrated to Behavior assistant how to implement a portion of the behavior program" },
                        new { CompetencyCheckParamId = 7, Comment = "List new setting/person. Describe generalization example during month", CompetencyCheckType = 2, Description = "Can indicate when the behavior occurred in another setting or with another person and the program was effectively implemented (Programming forgeneralization)" },
                        new { CompetencyCheckParamId = 8, Comment = "Medical status/Environmental changes/New Problem Behavior/Severity of problem behavior", CompetencyCheckType = 2, Description = "Verbally reported about major changes in the environment, daily activity schedule, medical status, or severity of problem behaviors, along with new behaviors occurring, and difficulty implementing behavior plan as is" },
                        new { CompetencyCheckParamId = 9, Comment = "", CompetencyCheckType = 1, Description = "Collected data on problem behaviors which ocurred in session" },
                        new { CompetencyCheckParamId = 10, Comment = "", CompetencyCheckType = 1, Description = "Followed recommended intervention procedures upon occurrence of problem behaviore in session" },
                        new { CompetencyCheckParamId = 11, Comment = "", CompetencyCheckType = 1, Description = "Provided reinforcement in accordance with the program" },
                        new { CompetencyCheckParamId = 12, Comment = "", CompetencyCheckType = 1, Description = "Implemented the replacement skills training programs and recorded the data" },
                        new { CompetencyCheckParamId = 13, Comment = "", CompetencyCheckType = 1, Description = "Modeled to caregiver how to implement a portion of the behavior program" },
                        new { CompetencyCheckParamId = 14, Comment = "", CompetencyCheckType = 1, Description = "Can indicate when the behavior occurred in another setting or with another person and the program was effectively implemented (Programming forgeneralization)" },
                        new { CompetencyCheckParamId = 15, Comment = "", CompetencyCheckType = 1, Description = "Data collected to date permit to be graphed" },
                        new { CompetencyCheckParamId = 16, Comment = "", CompetencyCheckType = 1, Description = "Daily progress notes reviewed" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.HasKey("DiagnosisId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DocumentExpires");

                    b.Property<int>("DocumentGroupId");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentGroupId");

                    b.ToTable("Documents");

                    b.HasData(
                        new { DocumentId = 1, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Social security" },
                        new { DocumentId = 2, DocumentExpires = true, DocumentGroupId = 1, DocumentName = "Proof Legal status (US citizen, Lawful Permanent Resident, Work Permit, etc.)" },
                        new { DocumentId = 3, DocumentExpires = true, DocumentGroupId = 1, DocumentName = "Driver License" },
                        new { DocumentId = 4, DocumentExpires = true, DocumentGroupId = 1, DocumentName = "I-9 Form: Employment Eligibility Verification" },
                        new { DocumentId = 5, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "E-Verify" },
                        new { DocumentId = 6, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "W9" },
                        new { DocumentId = 7, DocumentExpires = true, DocumentGroupId = 1, DocumentName = "Attestation of Compliance with Background Screening Requirements" },
                        new { DocumentId = 8, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Privacy Policy Acknowledgment Form" },
                        new { DocumentId = 9, DocumentExpires = true, DocumentGroupId = 1, DocumentName = "Liability" },
                        new { DocumentId = 10, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Confidentiality Agreement" },
                        new { DocumentId = 11, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "HIPPA Privacy & Confidentiality Statement" },
                        new { DocumentId = 12, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Abuse Reporting Policies" },
                        new { DocumentId = 13, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Commitment to educate about report abuse/neglect/explo/mis conduct" },
                        new { DocumentId = 14, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Bill of Rights" },
                        new { DocumentId = 15, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Managed care FRAUD and ABUSE" },
                        new { DocumentId = 16, DocumentExpires = false, DocumentGroupId = 1, DocumentName = "Affidavit Good Moral Charter (Notarized)" },
                        new { DocumentId = 17, DocumentExpires = false, DocumentGroupId = 2, DocumentName = "Employee General Information Form and Emergency Information" },
                        new { DocumentId = 18, DocumentExpires = false, DocumentGroupId = 2, DocumentName = "Resume" },
                        new { DocumentId = 19, DocumentExpires = false, DocumentGroupId = 2, DocumentName = "References 2 letter (previous employ)" },
                        new { DocumentId = 20, DocumentExpires = true, DocumentGroupId = 2, DocumentName = "Physician’s Health Certification TB test" },
                        new { DocumentId = 21, DocumentExpires = true, DocumentGroupId = 2, DocumentName = "Alcohol and drugs test" },
                        new { DocumentId = 22, DocumentExpires = true, DocumentGroupId = 2, DocumentName = "Car registration" },
                        new { DocumentId = 23, DocumentExpires = true, DocumentGroupId = 2, DocumentName = "Car insurance" },
                        new { DocumentId = 24, DocumentExpires = true, DocumentGroupId = 3, DocumentName = "Police record Footprints ACHA Level II" },
                        new { DocumentId = 25, DocumentExpires = true, DocumentGroupId = 3, DocumentName = "Local Police Background Check" },
                        new { DocumentId = 26, DocumentExpires = true, DocumentGroupId = 3, DocumentName = "OIG (results)" },
                        new { DocumentId = 27, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Application Form" },
                        new { DocumentId = 28, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Group Membership Authorization" },
                        new { DocumentId = 29, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Non-Institutional Medicaid Provider Agreements" },
                        new { DocumentId = 30, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Workplace Expectation" },
                        new { DocumentId = 31, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Job Description" },
                        new { DocumentId = 32, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Employment Statement of Commitment" },
                        new { DocumentId = 33, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Code of Professional Conduct" },
                        new { DocumentId = 34, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Policy on Jobs" },
                        new { DocumentId = 35, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Employment Agreement / Independent/Agreement" },
                        new { DocumentId = 36, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Employee Acknowledgement of Probationary Period Form" },
                        new { DocumentId = 37, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Disclosures" },
                        new { DocumentId = 38, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Employee Health release for denial TB" },
                        new { DocumentId = 39, DocumentExpires = false, DocumentGroupId = 4, DocumentName = "Telephone reference check form" },
                        new { DocumentId = 40, DocumentExpires = true, DocumentGroupId = 5, DocumentName = "Provider" },
                        new { DocumentId = 41, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "ATN" },
                        new { DocumentId = 42, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "NPI" },
                        new { DocumentId = 43, DocumentExpires = true, DocumentGroupId = 5, DocumentName = "Credentials" },
                        new { DocumentId = 44, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "RBT" },
                        new { DocumentId = 45, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "BCaBA" },
                        new { DocumentId = 46, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "Analyst" },
                        new { DocumentId = 47, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "Licenses" },
                        new { DocumentId = 48, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "Diplomas" },
                        new { DocumentId = 49, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "Transcripts" },
                        new { DocumentId = 50, DocumentExpires = false, DocumentGroupId = 5, DocumentName = "Attestation Form for Behavior Assistant" },
                        new { DocumentId = 51, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "DCC (Direct Care Core Competences) (course ID No: 1060050)" },
                        new { DocumentId = 52, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Zero Tolerance (course ID No: 1058718)" },
                        new { DocumentId = 53, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Requirements for all Waiver Providers & Incident Reporting (course ID No: 1060049)" },
                        new { DocumentId = 54, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Learner Orientation Provider/Customer (course ID No: 1060049)" },
                        new { DocumentId = 55, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "AIDs/HIV and Blood borne Pathogens (course ID No: 1059884)" },
                        new { DocumentId = 56, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "CPR/AED/BASIC FIRST AIDS" },
                        new { DocumentId = 57, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "HIPAA Basics (course ID No: 1058936)" },
                        new { DocumentId = 58, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Security Awareness" },
                        new { DocumentId = 59, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Access Civil Rights or Patient´s Rights" },
                        new { DocumentId = 60, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "OSHA" },
                        new { DocumentId = 61, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Infection Control" },
                        new { DocumentId = 62, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Patient´s Rights OR Access Civil Rights" },
                        new { DocumentId = 63, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Domestic Violence" },
                        new { DocumentId = 64, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Med Error Prevention" },
                        new { DocumentId = 65, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Med Record Documentation" },
                        new { DocumentId = 66, DocumentExpires = true, DocumentGroupId = 6, DocumentName = "Abuse/Neglect/Exploitation" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.DocumentGroup", b =>
                {
                    b.Property<int>("DocumentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DocumentGroupId");

                    b.ToTable("DocumentGroups");

                    b.HasData(
                        new { DocumentGroupId = 1, GroupName = "Legal" },
                        new { DocumentGroupId = 2, GroupName = "Personal Documents" },
                        new { DocumentGroupId = 3, GroupName = "Clearinghouse" },
                        new { DocumentGroupId = 4, GroupName = "Current work Documents" },
                        new { DocumentGroupId = 5, GroupName = "Licenses and Certifications" },
                        new { DocumentGroupId = 6, GroupName = "Inservices" },
                        new { DocumentGroupId = 7, GroupName = "Other and miscellaneous" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.DocumentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("Expires");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId", "DocumentId")
                        .IsUnique();

                    b.ToTable("DocumentsUsers");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<int>("MesssageType");

                    b.Property<DateTime?>("Sent");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("EmailId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("AbaBackend.DataModel.MonthlyNote", b =>
                {
                    b.Property<int>("MonthlyNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barriers2Treatment");

                    b.Property<bool>("ChangesCurrentPlan");

                    b.Property<int>("ClientId");

                    b.Property<string>("CommentsAboutCaregiver");

                    b.Property<bool>("ContinueNextMonth");

                    b.Property<string>("ExtraNotes");

                    b.Property<string>("FamilyChanges");

                    b.Property<string>("HomeChanges");

                    b.Property<string>("Medication");

                    b.Property<int>("Month");

                    b.Property<DateTime>("MonthlyNoteDate");

                    b.Property<string>("MonthlySummary");

                    b.Property<string>("ProviverChanges");

                    b.Property<bool>("ReassessmentNextMonth");

                    b.Property<string>("RecipientHealthIssues");

                    b.Property<bool>("Refer2OtherServices");

                    b.Property<string>("Services2ProvideNextMonth");

                    b.Property<int>("Year");

                    b.HasKey("MonthlyNoteId");

                    b.HasIndex("ClientId");

                    b.ToTable("MonthlyNotes");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("End");

                    b.Property<DateTime>("Start");

                    b.HasKey("PeriodId");

                    b.HasIndex("ClientId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientProblem", b =>
                {
                    b.Property<int>("PeriodClientProblemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineCount");

                    b.Property<DateTime?>("BaselineFrom");

                    b.Property<DateTime?>("BaselineTo");

                    b.Property<int>("ClientId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("ProblemId");

                    b.HasKey("PeriodClientProblemId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("PeriodId", "ClientId", "ProblemId")
                        .IsUnique();

                    b.ToTable("PeriodClientProblems");
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientProblemSto", b =>
                {
                    b.Property<int>("PeriodClientProblemStoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PeriodClientProblemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<int>("Weeks");

                    b.HasKey("PeriodClientProblemStoId");

                    b.HasIndex("PeriodClientProblemId");

                    b.ToTable("PeriodClientProblemSTOs");
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientReplacement", b =>
                {
                    b.Property<int>("PeriodClientReplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BaselineFrom");

                    b.Property<int?>("BaselinePercent");

                    b.Property<DateTime?>("BaselineTo");

                    b.Property<int>("ClientId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("ReplacementId");

                    b.HasKey("PeriodClientReplacementId");

                    b.HasIndex("ReplacementId");

                    b.HasIndex("PeriodId", "ClientId", "ReplacementId")
                        .IsUnique();

                    b.ToTable("PeriodClientReplacements");
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientReplacementSto", b =>
                {
                    b.Property<int>("PeriodClientReplacementStoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Percent");

                    b.Property<int>("PeriodClientReplacementId");

                    b.Property<int>("Status");

                    b.Property<int>("Weeks");

                    b.HasKey("PeriodClientReplacementStoId");

                    b.HasIndex("PeriodClientReplacementId");

                    b.ToTable("PeriodClientReplacementSTOs");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ProblemBehavior", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ProblemBehaviorDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ProblemId");

                    b.HasIndex("ProblemBehaviorDescription")
                        .IsUnique();

                    b.ToTable("ProblemBehaviors");

                    b.HasData(
                        new { ProblemId = 1, Active = true, ProblemBehaviorDescription = "Temper Tantrum" },
                        new { ProblemId = 2, Active = true, ProblemBehaviorDescription = "Elopement" },
                        new { ProblemId = 3, Active = true, ProblemBehaviorDescription = "Defiant behavior" },
                        new { ProblemId = 4, Active = true, ProblemBehaviorDescription = "Task Refusal" },
                        new { ProblemId = 5, Active = true, ProblemBehaviorDescription = "Physical Aggression " },
                        new { ProblemId = 6, Active = true, ProblemBehaviorDescription = "Verbal aggression" },
                        new { ProblemId = 7, Active = true, ProblemBehaviorDescription = "Self Injury Behavior" },
                        new { ProblemId = 8, Active = true, ProblemBehaviorDescription = "Hyperactive Behavior/Out of sit behavior" },
                        new { ProblemId = 9, Active = true, ProblemBehaviorDescription = "Inattentive behavior/Off task behavior" },
                        new { ProblemId = 10, Active = true, ProblemBehaviorDescription = "Disruptive behavior" },
                        new { ProblemId = 11, Active = true, ProblemBehaviorDescription = "Mouthing unsafe objects" },
                        new { ProblemId = 12, Active = true, ProblemBehaviorDescription = "Pica" },
                        new { ProblemId = 13, Active = true, ProblemBehaviorDescription = "Biting Self" },
                        new { ProblemId = 14, Active = true, ProblemBehaviorDescription = "Outburst Behavior" },
                        new { ProblemId = 15, Active = true, ProblemBehaviorDescription = "Climbing-presenting risk of fall" },
                        new { ProblemId = 16, Active = true, ProblemBehaviorDescription = "Bruxism" },
                        new { ProblemId = 17, Active = true, ProblemBehaviorDescription = "Property Destructions" },
                        new { ProblemId = 18, Active = true, ProblemBehaviorDescription = "Lying" },
                        new { ProblemId = 19, Active = true, ProblemBehaviorDescription = "Cheating" },
                        new { ProblemId = 20, Active = true, ProblemBehaviorDescription = "Impulsive Behavior" },
                        new { ProblemId = 21, Active = true, ProblemBehaviorDescription = "Vocal or Auditory stereotypy" },
                        new { ProblemId = 22, Active = true, ProblemBehaviorDescription = "Echolalia" },
                        new { ProblemId = 23, Active = true, ProblemBehaviorDescription = "Hyper-reactivity to sensory input" },
                        new { ProblemId = 24, Active = true, ProblemBehaviorDescription = "Hypo-reactivity to sensory input" },
                        new { ProblemId = 25, Active = true, ProblemBehaviorDescription = "Insomnia" },
                        new { ProblemId = 26, Active = true, ProblemBehaviorDescription = "Difficulty with receptive language" },
                        new { ProblemId = 27, Active = true, ProblemBehaviorDescription = "Difficulty with expressive language" },
                        new { ProblemId = 28, Active = true, ProblemBehaviorDescription = "Bolting" },
                        new { ProblemId = 29, Active = true, ProblemBehaviorDescription = "Saliva play or smearing" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("DateExpires");

                    b.Property<DateTime>("DateReferral");

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("FullAddress")
                        .HasMaxLength(120);

                    b.Property<string>("License")
                        .HasMaxLength(20);

                    b.Property<string>("Npi")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("Provider")
                        .HasMaxLength(60);

                    b.Property<string>("ReferralFullname")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("ReferralId");

                    b.HasIndex("ClientId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ReplacementByProblem", b =>
                {
                    b.Property<int>("ReplacementByProblemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ReplacementId");

                    b.Property<int>("SessionProblemId");

                    b.HasKey("ReplacementByProblemId");

                    b.HasIndex("ReplacementId");

                    b.HasIndex("SessionProblemId");

                    b.ToTable("ReplacementsByProblems");
                });

            modelBuilder.Entity("AbaBackend.DataModel.ReplacementProgram", b =>
                {
                    b.Property<int>("ReplacementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ReplacementProgramDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ReplacementId");

                    b.HasIndex("ReplacementProgramDescription")
                        .IsUnique();

                    b.ToTable("ReplacementPrograms");

                    b.HasData(
                        new { ReplacementId = 1, Active = true, ReplacementProgramDescription = "Attention seeking skills" },
                        new { ReplacementId = 2, Active = true, ReplacementProgramDescription = "Ask For breaks" },
                        new { ReplacementId = 3, Active = true, ReplacementProgramDescription = "Tangibles and activity request" },
                        new { ReplacementId = 4, Active = true, ReplacementProgramDescription = "Interrupt conversation politely" },
                        new { ReplacementId = 5, Active = true, ReplacementProgramDescription = "Following Instructions" },
                        new { ReplacementId = 6, Active = true, ReplacementProgramDescription = "Following a schedule of activities" },
                        new { ReplacementId = 7, Active = true, ReplacementProgramDescription = "Escape from demand program" },
                        new { ReplacementId = 8, Active = true, ReplacementProgramDescription = "Working independently" },
                        new { ReplacementId = 9, Active = true, ReplacementProgramDescription = "Come here" },
                        new { ReplacementId = 10, Active = true, ReplacementProgramDescription = "Delay of reinforcement" },
                        new { ReplacementId = 11, Active = true, ReplacementProgramDescription = "Accept “No response”" },
                        new { ReplacementId = 12, Active = true, ReplacementProgramDescription = "Time on task" },
                        new { ReplacementId = 13, Active = true, ReplacementProgramDescription = "Decreasing Distractibility program" },
                        new { ReplacementId = 14, Active = true, ReplacementProgramDescription = "Initiate and sustain peers in an activity and play" },
                        new { ReplacementId = 15, Active = true, ReplacementProgramDescription = "Initiation of physical interactions" },
                        new { ReplacementId = 16, Active = true, ReplacementProgramDescription = "Take a turns" },
                        new { ReplacementId = 17, Active = true, ReplacementProgramDescription = "Greetings" },
                        new { ReplacementId = 18, Active = true, ReplacementProgramDescription = "Sharing" },
                        new { ReplacementId = 19, Active = true, ReplacementProgramDescription = "Requesting skills" },
                        new { ReplacementId = 20, Active = true, ReplacementProgramDescription = "Collaborative play skills" },
                        new { ReplacementId = 21, Active = true, ReplacementProgramDescription = "Communication skills" },
                        new { ReplacementId = 22, Active = true, ReplacementProgramDescription = "Compliance skills" },
                        new { ReplacementId = 23, Active = true, ReplacementProgramDescription = "Calming strategies/Breathing exercises" },
                        new { ReplacementId = 24, Active = true, ReplacementProgramDescription = "Decision making" },
                        new { ReplacementId = 25, Active = true, ReplacementProgramDescription = "Expressive communication skills" },
                        new { ReplacementId = 26, Active = true, ReplacementProgramDescription = "Functional communication" },
                        new { ReplacementId = 27, Active = true, ReplacementProgramDescription = "Responding to name (Eyes Contact)" },
                        new { ReplacementId = 28, Active = true, ReplacementProgramDescription = "Responding to name (going)" },
                        new { ReplacementId = 29, Active = true, ReplacementProgramDescription = "Safety skills" },
                        new { ReplacementId = 30, Active = true, ReplacementProgramDescription = "Sensory skills" },
                        new { ReplacementId = 31, Active = true, ReplacementProgramDescription = "Social skills" },
                        new { ReplacementId = 32, Active = true, ReplacementProgramDescription = "Self-care skills" },
                        new { ReplacementId = 33, Active = true, ReplacementProgramDescription = "Showering Program" },
                        new { ReplacementId = 34, Active = true, ReplacementProgramDescription = "Safety Crossing Street" },
                        new { ReplacementId = 35, Active = true, ReplacementProgramDescription = "Brushing teeth" },
                        new { ReplacementId = 36, Active = true, ReplacementProgramDescription = "Washing and Drying face" },
                        new { ReplacementId = 37, Active = true, ReplacementProgramDescription = "Follow Night time routing" },
                        new { ReplacementId = 38, Active = true, ReplacementProgramDescription = "Dressing pant" },
                        new { ReplacementId = 39, Active = true, ReplacementProgramDescription = "Dressing Pullover" },
                        new { ReplacementId = 40, Active = true, ReplacementProgramDescription = "Eating with spoon" },
                        new { ReplacementId = 41, Active = true, ReplacementProgramDescription = "Keep eye contact" },
                        new { ReplacementId = 42, Active = true, ReplacementProgramDescription = "Toilet training" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BehaviorAnalysisCodeId");

                    b.Property<bool>("CanCreateSession");

                    b.Property<bool>("CanEditAllClientSession");

                    b.Property<bool>("HasDocuments");

                    b.Property<string>("RolName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RolShortName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TemplateName")
                        .HasMaxLength(20);

                    b.HasKey("RolId");

                    b.HasIndex("BehaviorAnalysisCodeId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RolId = 1, CanCreateSession = false, CanEditAllClientSession = true, HasDocuments = false, RolName = "Admin", RolShortName = "admin", TemplateName = "admin" },
                        new { RolId = 2, BehaviorAnalysisCodeId = 3, CanCreateSession = true, CanEditAllClientSession = true, HasDocuments = true, RolName = "Lead Analyst", RolShortName = "analyst", TemplateName = "specialist" },
                        new { RolId = 3, BehaviorAnalysisCodeId = 4, CanCreateSession = true, CanEditAllClientSession = false, HasDocuments = true, RolName = "Assistant Behavior Analyst", RolShortName = "assistant", TemplateName = "specialist" },
                        new { RolId = 4, BehaviorAnalysisCodeId = 5, CanCreateSession = true, CanEditAllClientSession = false, HasDocuments = true, RolName = "Technician", RolShortName = "tech", TemplateName = "specialist" },
                        new { RolId = 5, CanCreateSession = false, CanEditAllClientSession = false, HasDocuments = false, RolName = "HR", RolShortName = "hr", TemplateName = "hr" },
                        new { RolId = 6, CanCreateSession = false, CanEditAllClientSession = false, HasDocuments = false, RolName = "Client management", RolShortName = "management", TemplateName = "clientmanagement" },
                        new { RolId = 7, CanCreateSession = false, CanEditAllClientSession = false, HasDocuments = false, RolName = "Billing", RolShortName = "billing", TemplateName = "billing" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BehaviorAnalysisCodeId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Pos");

                    b.Property<DateTime>("SessionEnd");

                    b.Property<DateTime>("SessionStart");

                    b.Property<int>("SessionStatus");

                    b.Property<int>("SessionType");

                    b.Property<int>("TotalUnits");

                    b.Property<int>("UserId");

                    b.HasKey("SessionId");

                    b.HasIndex("BehaviorAnalysisCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionCollectBehavior", b =>
                {
                    b.Property<int>("SessionCollectBehaviorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Duration");

                    b.Property<DateTime>("Entry");

                    b.Property<int>("ProblemId");

                    b.Property<int>("SessionId");

                    b.HasKey("SessionCollectBehaviorId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionCollectBehaviors");
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionNote", b =>
                {
                    b.Property<int>("SessionNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaregiverId");

                    b.Property<string>("CaregiverNote");

                    b.Property<bool>("CaregiverTrainingCompetencyCheck");

                    b.Property<bool>("CaregiverTrainingObservationFeedback");

                    b.Property<string>("CaregiverTrainingOther");

                    b.Property<bool>("CaregiverTrainingParentCaregiverTraining");

                    b.Property<string>("CaregiverTrainingSummary");

                    b.Property<bool>("FeedbackCaregiver");

                    b.Property<string>("FeedbackCaregiverExplain");

                    b.Property<bool>("FeedbackOtherServices");

                    b.Property<string>("FeedbackOtherServicesExplain");

                    b.Property<int>("ParticipationLevel");

                    b.Property<string>("ProgressNotes");

                    b.Property<string>("ReinforcersEdibles");

                    b.Property<string>("ReinforcersNonEdibles");

                    b.Property<string>("ReinforcersOthers");

                    b.Property<string>("ReinforcersResult");

                    b.Property<int>("RiskBehavior");

                    b.Property<bool>("RiskBehaviorCrisisInvolved");

                    b.Property<string>("RiskBehaviorExplain");

                    b.Property<int>("SessionId");

                    b.Property<bool>("SummaryCommunication");

                    b.Property<bool>("SummaryDirectObservation");

                    b.Property<bool>("SummaryGeneralization");

                    b.Property<bool>("SummaryImplementedReduction");

                    b.Property<bool>("SummaryImplementedReplacement");

                    b.Property<bool>("SummaryObservationFeedback");

                    b.Property<string>("SummaryOther");

                    b.HasKey("SessionNoteId");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("SessionNotes");
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionProblem", b =>
                {
                    b.Property<int>("SessionProblemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DuringWichActivities");

                    b.Property<int>("ProblemId");

                    b.Property<string>("ReplacementInterventionsUsed");

                    b.Property<int>("SessionId");

                    b.HasKey("SessionProblemId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionsProblems");
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionSign", b =>
                {
                    b.Property<int>("SessionSignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SessionId");

                    b.Property<string>("Sign");

                    b.Property<DateTime>("SignedDate");

                    b.HasKey("SessionSignId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("SessionSign");
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionSupervisionNote", b =>
                {
                    b.Property<int>("SessionSupervisionNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BriefBCaBaTraining");

                    b.Property<bool>("BriefGeneralization");

                    b.Property<bool>("BriefInService");

                    b.Property<string>("BriefInServiceSubject");

                    b.Property<bool>("BriefObservation");

                    b.Property<bool>("BriefOther");

                    b.Property<string>("BriefOtherDescription");

                    b.Property<bool>("BriefReplacement");

                    b.Property<string>("CommentsRelated");

                    b.Property<DateTime?>("NextScheduledDate");

                    b.Property<int>("OversightAnalyzing");

                    b.Property<bool>("OversightAnalyzingBool");

                    b.Property<int>("OversightContributing");

                    b.Property<bool>("OversightContributingBool");

                    b.Property<int>("OversightDesigning");

                    b.Property<bool>("OversightDesigningBool");

                    b.Property<int>("OversightFollowUp");

                    b.Property<bool>("OversightFollowUpBool");

                    b.Property<int>("OversightGoals");

                    b.Property<bool>("OversightGoalsBool");

                    b.Property<int>("OversightMakingDecisions");

                    b.Property<bool>("OversightMakingDecisionsBool");

                    b.Property<int>("OversightModeling");

                    b.Property<bool>("OversightModelingBool");

                    b.Property<int>("OversightOverall");

                    b.Property<bool>("OversightOverallBool");

                    b.Property<int>("OversightResponse");

                    b.Property<bool>("OversightResponseBool");

                    b.Property<string>("Recommendations");

                    b.Property<int>("SessionId");

                    b.Property<bool>("Validation");

                    b.Property<int>("WorkWith");

                    b.Property<bool>("isDirectSession");

                    b.HasKey("SessionSupervisionNoteId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("SessionSupervisionNotes");
                });

            modelBuilder.Entity("AbaBackend.DataModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Apt")
                        .HasMaxLength(10);

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(20);

                    b.Property<string>("BankAddress")
                        .HasMaxLength(100);

                    b.Property<string>("BankName")
                        .HasMaxLength(70);

                    b.Property<string>("BankRoutingNumber")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<byte[]>("Hash");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(20);

                    b.Property<string>("Mpi")
                        .HasMaxLength(20);

                    b.Property<string>("Npi")
                        .HasMaxLength(20);

                    b.Property<decimal>("PayRate")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int>("RolId");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("SocialSecurity")
                        .HasMaxLength(11);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Zipcode")
                        .HasMaxLength(10);

                    b.HasKey("UserId");

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = 1, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Yuri", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Morales", PayRate = 0m, RolId = 1, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "admin" },
                        new { UserId = 2, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Jhon", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Doe", PayRate = 0m, RolId = 2, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "analyst" },
                        new { UserId = 3, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Peter", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Smith", PayRate = 0m, RolId = 3, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "analystassistant" },
                        new { UserId = 4, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Jason", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Bourne", PayRate = 0m, RolId = 4, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "rbt" },
                        new { UserId = 5, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "John", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Jackson", PayRate = 0m, RolId = 5, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "hr" },
                        new { UserId = 6, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Roberto", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Perez", PayRate = 0m, RolId = 6, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "clientmanagement" },
                        new { UserId = 7, Active = true, Created = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ymorales@redient.com", Firstname = "Paco", Hash = new byte[] { 38, 71, 169, 96, 147, 143, 219, 73, 62, 228, 252, 185, 59, 102, 208, 177, 200, 43, 108, 98, 133, 236, 42, 143, 117, 206, 133, 158, 73, 239, 190, 89, 180, 69, 209, 113, 243, 227, 183, 246, 62, 122, 97, 162, 19, 151, 20, 6, 251, 16, 224, 0, 214, 163, 86, 188, 211, 148, 233, 104, 46, 52, 234, 141 }, Lastname = "Rivera", PayRate = 0m, RolId = 7, Salt = new byte[] { 73, 78, 73, 84, 73, 65, 76, 45, 83, 65, 76, 84, 45, 72, 69, 82, 69 }, Username = "billing" }
                    );
                });

            modelBuilder.Entity("AbaBackend.DataModel.UserSign", b =>
                {
                    b.Property<int>("UserSignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sign");

                    b.Property<DateTime>("SignedDate");

                    b.Property<int>("UserId");

                    b.HasKey("UserSignId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSigns");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Assessment", b =>
                {
                    b.HasOne("AbaBackend.DataModel.BehaviorAnalysisCode", "BehaviorAnalysisCode")
                        .WithMany()
                        .HasForeignKey("BehaviorAnalysisCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany("Assessments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Assignment", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany("Assignments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Caregiver", b =>
                {
                    b.HasOne("AbaBackend.DataModel.CaregiverType", "CaregiverType")
                        .WithMany()
                        .HasForeignKey("CaregiverTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.Client")
                        .WithMany("Caregivers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientDiagnosis", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client")
                        .WithMany("ClientDiagnostics")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientProblem", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.ProblemBehavior", "ProblemBehavior")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.ClientReplacement", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.ReplacementProgram", "ReplacementProgram")
                        .WithMany()
                        .HasForeignKey("ReplacementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.CompetencyCheck", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Caregiver", "Caregiver")
                        .WithMany()
                        .HasForeignKey("CaregiverId");

                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.User", "EvaluationBy")
                        .WithMany()
                        .HasForeignKey("EvaluationById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AbaBackend.DataModel.CompetencyCheckClientParam", b =>
                {
                    b.HasOne("AbaBackend.DataModel.CompetencyCheck")
                        .WithMany("CompetencyCheckClientParams")
                        .HasForeignKey("CompetencyCheckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.CompetencyCheckParam", "CompetencyCheckParam")
                        .WithMany()
                        .HasForeignKey("CompetencyCheckParamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Document", b =>
                {
                    b.HasOne("AbaBackend.DataModel.DocumentGroup", "DocumentGroup")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.DocumentUser", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.MonthlyNote", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client")
                        .WithMany("MonthlyNotes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Period", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client")
                        .WithMany("Periods")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientProblem", b =>
                {
                    b.HasOne("AbaBackend.DataModel.ProblemBehavior", "ProblemBehavior")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientProblemSto", b =>
                {
                    b.HasOne("AbaBackend.DataModel.PeriodClientProblem")
                        .WithMany("STOs")
                        .HasForeignKey("PeriodClientProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientReplacement", b =>
                {
                    b.HasOne("AbaBackend.DataModel.ReplacementProgram", "Replacement")
                        .WithMany()
                        .HasForeignKey("ReplacementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.PeriodClientReplacementSto", b =>
                {
                    b.HasOne("AbaBackend.DataModel.PeriodClientReplacement")
                        .WithMany("STOs")
                        .HasForeignKey("PeriodClientReplacementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Referral", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany("Referrals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.ReplacementByProblem", b =>
                {
                    b.HasOne("AbaBackend.DataModel.ReplacementProgram", "ReplacementProgram")
                        .WithMany()
                        .HasForeignKey("ReplacementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.SessionProblem")
                        .WithMany("ReplacementByProblems")
                        .HasForeignKey("SessionProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.Rol", b =>
                {
                    b.HasOne("AbaBackend.DataModel.BehaviorAnalysisCode", "BehaviorAnalysisCode")
                        .WithMany()
                        .HasForeignKey("BehaviorAnalysisCodeId");
                });

            modelBuilder.Entity("AbaBackend.DataModel.Session", b =>
                {
                    b.HasOne("AbaBackend.DataModel.BehaviorAnalysisCode", "BehaviorAnalysisCode")
                        .WithMany()
                        .HasForeignKey("BehaviorAnalysisCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionCollectBehavior", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Session")
                        .WithMany("SessionCollectBehavior")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionNote", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Caregiver", "Caregiver")
                        .WithMany()
                        .HasForeignKey("CaregiverId");

                    b.HasOne("AbaBackend.DataModel.Session")
                        .WithOne("SessionNote")
                        .HasForeignKey("AbaBackend.DataModel.SessionNote", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionProblem", b =>
                {
                    b.HasOne("AbaBackend.DataModel.ProblemBehavior", "ProblemBehavior")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbaBackend.DataModel.Session")
                        .WithMany("SessionProblems")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionSign", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Session")
                        .WithOne("Sign")
                        .HasForeignKey("AbaBackend.DataModel.SessionSign", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.SessionSupervisionNote", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Session")
                        .WithOne("SessionSupervisionNote")
                        .HasForeignKey("AbaBackend.DataModel.SessionSupervisionNote", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.User", b =>
                {
                    b.HasOne("AbaBackend.DataModel.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbaBackend.DataModel.UserSign", b =>
                {
                    b.HasOne("AbaBackend.DataModel.User")
                        .WithOne("UserSign")
                        .HasForeignKey("AbaBackend.DataModel.UserSign", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
